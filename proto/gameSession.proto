syntax = "proto3";
package protobuf_session;

///////////
// Enums //
///////////

enum GameMode {
  UNKNOWN_MODE = 0;
  PVP = 1;
  PVE = 2;
}

enum GameSessionState {
  UNKNOWN_STATE = 0;
  WAITING_FOR_PLAYERS = 1;
  READY = 2;
  PLAYING = 3;
  FINISHED = 4;
}

enum GameChoice {
  UNKNOWN_CHOICE = 0;
  ROCK = 1;
  PAPER = 2;
  SCISSORS = 3;
}

// todo remove unused ones later
enum ErrorCode {
  UNKNOWN_ERROR = 0;
  INVALID_GAME_MODE = 1;
  INVALID_NUMBER_OF_ROUNDS = 2;
  INVALID_GAME_SESSION_ID = 3;
  INVALID_PLAYER_ID = 4;
  INVALID_GAME_SESSION_STATE = 5;
  INVALID_GAME_CHOICE = 6;
  GAME_SESSION_NOT_FOUND = 7;
  PLAYER_NOT_FOUND = 8;
  PLAYER_ALREADY_JOINED = 9;
  PLAYER_NOT_JOINED = 10;
  PLAYER_ALREADY_LEFT = 11;
  PLAYER_NOT_LEFT = 12;
  PLAYER_ALREADY_PLAYED = 13;
  PLAYER_NOT_PLAYED = 14;
  PLAYER_ALREADY_FINISHED = 15;
  PLAYER_NOT_FINISHED = 16;
  GAME_SESSION_ALREADY_FINISHED = 17;
  GAME_SESSION_NOT_FINISHED = 18;
  GAME_SESSION_NOT_WAITING_FOR_PLAYERS = 19;
  GAME_SESSION_FULL = 20;
  REQUEST_NOT_SET = 21;
  UNKNOWN_REQUEST = 22;
  GAME_SESSION_NOT_READY = 23;
  LOCK_EXCEPTION = 24;
  PLAYER_ID_NOT_VALID = 25;
  TIMEOUT = 26;
}

///////////////
// Game Data //
///////////////

// player data - stored inside game session
message Player {
  fixed64 id = 1;
  string name = 2;
  GameChoice choice = 3;
  fixed64 score = 4;
  bool is_ai = 5;
}
//
// game session data
message GameSession {
  string title = 1;
  fixed64 id = 2;
  GameMode mode = 3;
  GameSessionState state = 4;
  Player player1 = 5;
  Player player2 = 6;
  bool is_draw = 7;
  fixed64 winner_id = 8;
}

////////////////////////////
// Requests and responses //
//   For starting game    //
////////////////////////////

message CreateGameSessionRequest {
  string title = 1;
  GameMode mode = 2;
}

message CreateGameSessionResponse {
  GameSession game_session = 1;
}

message GetGameSessionDataRequest {
  fixed64 game_session_id = 1;
}

message GetGameSessionDataResponse {
  GameSession game_session = 1;
}

message JoinGameSessionRequest {
  fixed64 game_session_id = 1;
  string player_name = 2;
}

message JoinGameSessionResponse {
  GameSession game_session = 1;
  fixed64 player_id = 2;
}

message Error {
  ErrorCode error_code = 1;
}

////////////////////////////
// Requests and responses //
//      For gameplay      //
////////////////////////////

// Returns response when both players are joined
// timeout: 2 minutes
message WaitTillGameReadyRequest {
  fixed64 game_session_id = 1;
}

message WaitTillGameReadyResponse {
  GameSession game_session = 1;
}

message RockPaperScissorsRequest {
  fixed64 game_session_id = 1;
  fixed64 player_id = 2;
  GameChoice choice = 3;
}

message RockPaperScissorsResponse {
  GameSession game_session = 1;
}

message WaitTillGameFinishRequest {
  fixed64 game_session_id = 1;
}

message WaitTillGameFinishResponse {
  GameSession game_session = 1;
}

/////////////////////////////////////////////////////
// Wrappers for requests and responses             //
// Use for communication between client and server //
/////////////////////////////////////////////////////
message Request {
  oneof request {
    CreateGameSessionRequest create_game_session_request = 1;
    GetGameSessionDataRequest get_game_session_data_request = 2;
    JoinGameSessionRequest join_game_session_request = 3;
    WaitTillGameReadyRequest wait_till_game_ready_request = 4;
    RockPaperScissorsRequest rock_paper_scissors_request = 5;
    WaitTillGameFinishRequest wait_till_game_finish_request = 6;
  }
}

message Response {
  oneof response {
    CreateGameSessionResponse create_game_session_response = 1;
    GetGameSessionDataResponse get_game_session_data_response = 2;
    JoinGameSessionResponse join_game_session_response = 3;
    WaitTillGameReadyResponse wait_till_game_ready_response = 4;
    RockPaperScissorsResponse rock_paper_scissors_response = 5;
    WaitTillGameFinishResponse wait_till_game_finish_response = 6;
    Error error = 7;
  }
}
